// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/config/srv/proto/config/config.proto
// DO NOT EDIT!

/*
Package go_micro_srv_config is a generated protocol buffer package.

It is generated from these files:
	github.com/kazoup/platform/config/srv/proto/config/config.proto

It has these top-level messages:
	StatusRequest
	StatusResponse
	SetFlagsRequest
	SetFlagsResponse
*/
package go_micro_srv_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusResponse struct {
	APPLIANCE_IS_CONFIGURED bool   `protobuf:"varint,1,opt,name=APPLIANCE_IS_CONFIGURED,json=aPPLIANCEISCONFIGURED" json:"APPLIANCE_IS_CONFIGURED,omitempty"`
	APPLIANCE_IS_DEMO       bool   `protobuf:"varint,2,opt,name=APPLIANCE_IS_DEMO,json=aPPLIANCEISDEMO" json:"APPLIANCE_IS_DEMO,omitempty"`
	APPLIANCE_IS_REGISTERED bool   `protobuf:"varint,3,opt,name=APPLIANCE_IS_REGISTERED,json=aPPLIANCEISREGISTERED" json:"APPLIANCE_IS_REGISTERED,omitempty"`
	GIT_COMMIT_STRING       string `protobuf:"bytes,4,opt,name=GIT_COMMIT_STRING,json=gITCOMMITSTRING" json:"GIT_COMMIT_STRING,omitempty"`
	SMB_USER_EXISTS         bool   `protobuf:"varint,5,opt,name=SMB_USER_EXISTS,json=sMBUSEREXISTS" json:"SMB_USER_EXISTS,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetFlagsRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *SetFlagsRequest) Reset()                    { *m = SetFlagsRequest{} }
func (m *SetFlagsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFlagsRequest) ProtoMessage()               {}
func (*SetFlagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SetFlagsResponse struct {
}

func (m *SetFlagsResponse) Reset()                    { *m = SetFlagsResponse{} }
func (m *SetFlagsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetFlagsResponse) ProtoMessage()               {}
func (*SetFlagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*StatusRequest)(nil), "go.micro.srv.config.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "go.micro.srv.config.StatusResponse")
	proto.RegisterType((*SetFlagsRequest)(nil), "go.micro.srv.config.SetFlagsRequest")
	proto.RegisterType((*SetFlagsResponse)(nil), "go.micro.srv.config.SetFlagsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Config service

type ConfigClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error)
	SetFlags(ctx context.Context, in *SetFlagsRequest, opts ...client.CallOption) (*SetFlagsResponse, error)
}

type configClient struct {
	c           client.Client
	serviceName string
}

func NewConfigClient(serviceName string, c client.Client) ConfigClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.config"
	}
	return &configClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *configClient) Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.Status", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SetFlags(ctx context.Context, in *SetFlagsRequest, opts ...client.CallOption) (*SetFlagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Config.SetFlags", in)
	out := new(SetFlagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigHandler interface {
	Status(context.Context, *StatusRequest, *StatusResponse) error
	SetFlags(context.Context, *SetFlagsRequest, *SetFlagsResponse) error
}

func RegisterConfigHandler(s server.Server, hdlr ConfigHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Config{hdlr}, opts...))
}

type Config struct {
	ConfigHandler
}

func (h *Config) Status(ctx context.Context, in *StatusRequest, out *StatusResponse) error {
	return h.ConfigHandler.Status(ctx, in, out)
}

func (h *Config) SetFlags(ctx context.Context, in *SetFlagsRequest, out *SetFlagsResponse) error {
	return h.ConfigHandler.SetFlags(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/kazoup/platform/config/srv/proto/config/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0xdd, 0x9c, 0x63, 0x0b, 0xcc, 0x6a, 0x44, 0x2c, 0x3b, 0x49, 0x75, 0x22, 0x1e, 0x52,
	0x50, 0xf0, 0x2a, 0xfb, 0x91, 0x95, 0x80, 0xdd, 0x46, 0xd2, 0x81, 0x9e, 0x4a, 0x37, 0xba, 0x3a,
	0xdc, 0x96, 0xda, 0xa6, 0x82, 0x9e, 0xfc, 0xb3, 0xfc, 0xf3, 0x6c, 0x13, 0xc2, 0x1c, 0x1b, 0x7a,
	0x4a, 0xf9, 0x7c, 0xdf, 0xfb, 0xbe, 0xf4, 0x11, 0xf0, 0x10, 0xcd, 0xc5, 0x4b, 0x36, 0x41, 0x53,
	0xbe, 0xb4, 0x5f, 0x83, 0x4f, 0x9e, 0xc5, 0x76, 0xbc, 0x08, 0xc4, 0x8c, 0x27, 0x4b, 0x7b, 0xca,
	0x57, 0xb3, 0x79, 0x64, 0xa7, 0xc9, 0xbb, 0x1d, 0x27, 0x5c, 0x70, 0x0d, 0xd4, 0x81, 0x24, 0x83,
	0x27, 0x11, 0x47, 0xcb, 0xf9, 0x34, 0xe1, 0x28, 0xd7, 0x21, 0x35, 0xb2, 0x0c, 0xd0, 0x60, 0x22,
	0x10, 0x59, 0x4a, 0xc3, 0xb7, 0x2c, 0x4c, 0x85, 0xf5, 0x55, 0x06, 0x87, 0x9a, 0xa4, 0x31, 0x5f,
	0xa5, 0x21, 0xbc, 0x07, 0x67, 0xed, 0xd1, 0xe8, 0x91, 0xb4, 0x07, 0x5d, 0xec, 0x13, 0xe6, 0x77,
	0x87, 0x83, 0x3e, 0x71, 0xc6, 0x14, 0xf7, 0xcc, 0xd2, 0x79, 0xe9, 0xba, 0x46, 0x4f, 0x03, 0x3d,
	0x26, 0x6c, 0x3d, 0x84, 0x37, 0xe0, 0x78, 0xc3, 0xd7, 0xc3, 0xee, 0xd0, 0x2c, 0x4b, 0x87, 0xf1,
	0xcb, 0x51, 0xe0, 0xad, 0x0c, 0x8a, 0x1d, 0xc2, 0x3c, 0x5c, 0x64, 0xec, 0x6f, 0x65, 0xac, 0x87,
	0x45, 0x86, 0x43, 0xbc, 0xfc, 0x4a, 0xae, 0x9b, 0x1f, 0xcc, 0xa3, 0x64, 0xe0, 0x98, 0x95, 0xdc,
	0x51, 0xa7, 0x46, 0x44, 0x3c, 0xc5, 0x15, 0x86, 0x57, 0xc0, 0x60, 0x6e, 0xc7, 0x1f, 0x33, 0x4c,
	0x7d, 0xfc, 0x94, 0x6f, 0x60, 0xe6, 0x81, 0xdc, 0xdd, 0x48, 0xdd, 0x4e, 0x41, 0x15, 0xb4, 0x5a,
	0xb9, 0x2e, 0x14, 0xfd, 0x45, 0x10, 0xe9, 0x56, 0x20, 0x04, 0x15, 0xf1, 0x11, 0x87, 0xf2, 0x7f,
	0xeb, 0x54, 0x7e, 0x5b, 0x10, 0x1c, 0xad, 0x65, 0xaa, 0xaa, 0xdb, 0xef, 0x12, 0xa8, 0x76, 0x65,
	0xb3, 0x90, 0x81, 0xaa, 0xea, 0x11, 0x5a, 0x68, 0x47, 0xf3, 0x68, 0xa3, 0xf6, 0xe6, 0xc5, 0x9f,
	0x1a, 0xb5, 0xdd, 0xda, 0x83, 0xcf, 0xa0, 0xa6, 0x33, 0xe1, 0xe5, 0x6e, 0xcb, 0xe6, 0xcd, 0x9b,
	0xad, 0x7f, 0x54, 0x7a, 0xf5, 0xa4, 0x2a, 0x5f, 0xc9, 0xdd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x16, 0x58, 0x22, 0x9f, 0x68, 0x02, 0x00, 0x00,
}
