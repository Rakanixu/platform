// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/crawler/srv/proto/crawler/crawler.proto
// DO NOT EDIT!

/*
Package crawler is a generated protocol buffer package.

It is generated from these files:
	github.com/kazoup/platform/crawler/srv/proto/crawler/crawler.proto

It has these top-level messages:
	Status
	StartRequest
	StartResponse
	StopRequest
	StopResponse
	SearchRequest
	SearchResponse
	StatusRequest
	StatusResponse
	Metric
*/
package crawler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Status struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type        string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Config      map[string]string `protobuf:"bytes,4,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Status) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type StartRequest struct {
	Url    string            `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StopRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SearchRequest struct {
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SearchResponse struct {
	Crawls map[string]*Status `protobuf:"bytes,1,rep,name=crawls" json:"crawls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SearchResponse) GetCrawls() map[string]*Status {
	if m != nil {
		return m.Crawls
	}
	return nil
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StatusResponse struct {
	Counter int64 `protobuf:"varint,1,opt,name=counter" json:"counter,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Metric struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*StartRequest)(nil), "StartRequest")
	proto.RegisterType((*StartResponse)(nil), "StartResponse")
	proto.RegisterType((*StopRequest)(nil), "StopRequest")
	proto.RegisterType((*StopResponse)(nil), "StopResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "StatusResponse")
	proto.RegisterType((*Metric)(nil), "Metric")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Crawl service

type CrawlClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (Crawl_StatusClient, error)
}

type crawlClient struct {
	c           client.Client
	serviceName string
}

func NewCrawlClient(serviceName string, c client.Client) CrawlClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "crawl"
	}
	return &crawlClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *crawlClient) Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Crawl.Start", in)
	out := new(StartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlClient) Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Crawl.Stop", in)
	out := new(StopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Crawl.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlClient) Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (Crawl_StatusClient, error) {
	req := c.c.NewRequest(c.serviceName, "Crawl.Status", &StatusRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &crawlStatusClient{stream}, nil
}

type Crawl_StatusClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StatusResponse, error)
}

type crawlStatusClient struct {
	stream client.Streamer
}

func (x *crawlStatusClient) Close() error {
	return x.stream.Close()
}

func (x *crawlStatusClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *crawlStatusClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *crawlStatusClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Crawl service

type CrawlHandler interface {
	Start(context.Context, *StartRequest, *StartResponse) error
	Stop(context.Context, *StopRequest, *StopResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Status(context.Context, *StatusRequest, Crawl_StatusStream) error
}

func RegisterCrawlHandler(s server.Server, hdlr CrawlHandler) {
	s.Handle(s.NewHandler(&Crawl{hdlr}))
}

type Crawl struct {
	CrawlHandler
}

func (h *Crawl) Start(ctx context.Context, in *StartRequest, out *StartResponse) error {
	return h.CrawlHandler.Start(ctx, in, out)
}

func (h *Crawl) Stop(ctx context.Context, in *StopRequest, out *StopResponse) error {
	return h.CrawlHandler.Stop(ctx, in, out)
}

func (h *Crawl) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.CrawlHandler.Search(ctx, in, out)
}

func (h *Crawl) Status(ctx context.Context, stream server.Streamer) error {
	m := new(StatusRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CrawlHandler.Status(ctx, m, &crawlStatusStream{stream})
}

type Crawl_StatusStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StatusResponse) error
}

type crawlStatusStream struct {
	stream server.Streamer
}

func (x *crawlStatusStream) Close() error {
	return x.stream.Close()
}

func (x *crawlStatusStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *crawlStatusStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *crawlStatusStream) Send(m *StatusResponse) error {
	return x.stream.Send(m)
}

var fileDescriptor0 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xd1, 0xee, 0xd2, 0x30,
	0x14, 0xc6, 0xd9, 0x06, 0xfb, 0x87, 0x33, 0x36, 0x92, 0x92, 0xe8, 0x98, 0x37, 0x38, 0x63, 0x82,
	0x31, 0x74, 0x06, 0x13, 0x63, 0xbc, 0x94, 0x78, 0xe9, 0x8d, 0x3c, 0xc1, 0x18, 0x05, 0x16, 0xc6,
	0x3a, 0xbb, 0x16, 0x83, 0xaf, 0xe0, 0xeb, 0xf8, 0x80, 0xb6, 0x5d, 0xc1, 0xd5, 0x5b, 0xaf, 0x96,
	0x73, 0xce, 0xb7, 0x73, 0xbe, 0xef, 0x97, 0xc2, 0xe7, 0x63, 0xc9, 0x4f, 0x62, 0x87, 0x0b, 0x7a,
	0xc9, 0xce, 0xf9, 0x4f, 0x2a, 0x9a, 0xac, 0xa9, 0x72, 0x7e, 0xa0, 0xec, 0x92, 0x15, 0x2c, 0xff,
	0x51, 0x11, 0x96, 0xb5, 0xec, 0x9a, 0x35, 0x8c, 0x72, 0xfa, 0xe8, 0x98, 0x2f, 0xd6, 0xdd, 0xf4,
	0x97, 0x03, 0xfe, 0x96, 0xe7, 0x5c, 0xb4, 0x08, 0xc0, 0x2d, 0xf7, 0xb1, 0xb3, 0x70, 0x96, 0x1e,
	0x9a, 0xc0, 0x90, 0xdf, 0x1a, 0x12, 0xbb, 0xb2, 0x1a, 0xa3, 0x19, 0x04, 0x7b, 0xd2, 0x16, 0xac,
	0x6c, 0x78, 0x49, 0xeb, 0xd8, 0xd3, 0xcd, 0x57, 0xe0, 0x17, 0xb4, 0x3e, 0x94, 0xc7, 0x78, 0xb8,
	0xf0, 0x96, 0xc1, 0x7a, 0x86, 0xbb, 0x3d, 0x78, 0xa3, 0xbb, 0x5f, 0x6a, 0xce, 0x6e, 0xc9, 0x0a,
	0x82, 0x5e, 0x89, 0x02, 0xf0, 0xce, 0xe4, 0xa6, 0x6f, 0x8c, 0x51, 0x08, 0xa3, 0x6b, 0x5e, 0x09,
	0x73, 0xe4, 0x93, 0xfb, 0xd1, 0x49, 0x05, 0x4c, 0xe4, 0x12, 0xc6, 0xbf, 0x91, 0xef, 0x82, 0xb4,
	0x5c, 0xe9, 0x05, 0xab, 0x8c, 0xfe, 0xcd, 0xe3, 0xa0, 0xab, 0x0f, 0xce, 0x71, 0x5f, 0xfb, 0x3f,
	0x67, 0xa7, 0x10, 0x9a, 0x55, 0x6d, 0x43, 0xeb, 0x96, 0xa4, 0x73, 0x08, 0xb6, 0x9c, 0x36, 0x77,
	0x1b, 0x3d, 0x32, 0x69, 0xa4, 0x2c, 0xaa, 0x91, 0x91, 0xaa, 0x7f, 0x49, 0xce, 0x8a, 0x93, 0x11,
	0xcb, 0x0c, 0xd1, 0xbd, 0xd1, 0x49, 0xd0, 0x5b, 0x69, 0x5c, 0x41, 0x6f, 0xe5, 0x0a, 0x65, 0xfc,
	0x05, 0xb6, 0x05, 0x78, 0xa3, 0xa7, 0x9d, 0xf5, 0x0f, 0xd2, 0xfa, 0xdf, 0xd2, 0xb6, 0xfe, 0xac,
	0x6f, 0x3d, 0x58, 0x3f, 0x19, 0xe2, 0xbd, 0x0c, 0xb2, 0xba, 0xfb, 0x78, 0x29, 0x7d, 0x98, 0x86,
	0xf1, 0x31, 0x85, 0xa7, 0x82, 0x8a, 0x9a, 0x13, 0x66, 0xb2, 0x3c, 0x07, 0xff, 0x2b, 0xe1, 0xac,
	0x2c, 0x14, 0x14, 0x3d, 0xea, 0x06, 0xeb, 0xdf, 0x0e, 0x8c, 0xb4, 0x0b, 0xb4, 0x84, 0x91, 0x46,
	0x83, 0x42, 0x8b, 0x76, 0x12, 0x61, 0x9b, 0xd8, 0x00, 0xbd, 0x86, 0xa1, 0x02, 0x83, 0x26, 0xb8,
	0x87, 0x2e, 0x09, 0xb1, 0x45, 0x6b, 0xa0, 0x60, 0x74, 0xe9, 0x51, 0x84, 0x2d, 0x70, 0xc9, 0xf4,
	0x1f, 0x2c, 0x52, 0xbc, 0x7a, 0x3c, 0xce, 0x08, 0x5b, 0xe9, 0x94, 0xd8, 0x0a, 0x97, 0x0e, 0xde,
	0x39, 0x3b, 0x5f, 0xbf, 0xe9, 0xf7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xa5, 0x55, 0x33,
	0x19, 0x03, 0x00, 0x00,
}
