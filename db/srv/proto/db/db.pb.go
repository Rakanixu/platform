// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/db/srv/proto/db/db.proto
// DO NOT EDIT!

package go_micro_srv_db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ReadRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ReadResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type UpdateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type DeleteRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type DeleteByQueryRequest struct {
	Indexes  []string `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
	Types    []string `protobuf:"bytes,2,rep,name=types" json:"types,omitempty"`
	Term     string   `protobuf:"bytes,3,opt,name=term" json:"term,omitempty"`
	Category string   `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`
	Url      string   `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Depth    int64    `protobuf:"varint,6,opt,name=depth" json:"depth,omitempty"`
	FileType string   `protobuf:"bytes,7,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	LastSeen int64    `protobuf:"varint,8,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
}

func (m *DeleteByQueryRequest) Reset()                    { *m = DeleteByQueryRequest{} }
func (m *DeleteByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteByQueryRequest) ProtoMessage()               {}
func (*DeleteByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type DeleteByQueryResponse struct {
}

func (m *DeleteByQueryResponse) Reset()                    { *m = DeleteByQueryResponse{} }
func (m *DeleteByQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteByQueryResponse) ProtoMessage()               {}
func (*DeleteByQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type SearchRequest struct {
	Index                string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Term                 string `protobuf:"bytes,2,opt,name=term" json:"term,omitempty"`
	From                 int64  `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	Size                 int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Category             string `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	Url                  string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Depth                int64  `protobuf:"varint,7,opt,name=depth" json:"depth,omitempty"`
	Type                 string `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	FileType             string `protobuf:"bytes,9,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	LastSeen             int64  `protobuf:"varint,10,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	Access               string `protobuf:"bytes,11,opt,name=access" json:"access,omitempty"`
	ContentCategory      string `protobuf:"bytes,12,opt,name=content_category,json=contentCategory" json:"content_category,omitempty"`
	NoKazoupFileOriginal bool   `protobuf:"varint,13,opt,name=no_kazoup_file_original,json=noKazoupFileOriginal" json:"no_kazoup_file_original,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type SearchResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type SearchByIdRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *SearchByIdRequest) Reset()                    { *m = SearchByIdRequest{} }
func (m *SearchByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchByIdRequest) ProtoMessage()               {}
func (*SearchByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type SearchByIdResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *SearchByIdResponse) Reset()                    { *m = SearchByIdResponse{} }
func (m *SearchByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchByIdResponse) ProtoMessage()               {}
func (*SearchByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type HealthRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type HealthResponse struct {
	Status int64  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func init() {
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.db.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.db.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.db.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.db.ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.db.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.db.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.db.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.db.DeleteResponse")
	proto.RegisterType((*DeleteByQueryRequest)(nil), "go.micro.srv.db.DeleteByQueryRequest")
	proto.RegisterType((*DeleteByQueryResponse)(nil), "go.micro.srv.db.DeleteByQueryResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.db.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.db.SearchResponse")
	proto.RegisterType((*SearchByIdRequest)(nil), "go.micro.srv.db.SearchByIdRequest")
	proto.RegisterType((*SearchByIdResponse)(nil), "go.micro.srv.db.SearchByIdResponse")
	proto.RegisterType((*HealthRequest)(nil), "go.micro.srv.db.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "go.micro.srv.db.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DB service

type DBClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...client.CallOption) (*DeleteByQueryResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	SearchById(ctx context.Context, in *SearchByIdRequest, opts ...client.CallOption) (*SearchByIdResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
}

type dBClient struct {
	c           client.Client
	serviceName string
}

func NewDBClient(serviceName string, c client.Client) DBClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.db"
	}
	return &dBClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *dBClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...client.CallOption) (*DeleteByQueryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.DeleteByQuery", in)
	out := new(DeleteByQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) SearchById(ctx context.Context, in *SearchByIdRequest, opts ...client.CallOption) (*SearchByIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.SearchById", in)
	out := new(SearchByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DB.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DB service

type DBHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteByQuery(context.Context, *DeleteByQueryRequest, *DeleteByQueryResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	SearchById(context.Context, *SearchByIdRequest, *SearchByIdResponse) error
	Health(context.Context, *HealthRequest, *HealthResponse) error
}

func RegisterDBHandler(s server.Server, hdlr DBHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DB{hdlr}, opts...))
}

type DB struct {
	DBHandler
}

func (h *DB) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.DBHandler.Create(ctx, in, out)
}

func (h *DB) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.DBHandler.Read(ctx, in, out)
}

func (h *DB) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.DBHandler.Update(ctx, in, out)
}

func (h *DB) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.DBHandler.Delete(ctx, in, out)
}

func (h *DB) DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, out *DeleteByQueryResponse) error {
	return h.DBHandler.DeleteByQuery(ctx, in, out)
}

func (h *DB) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.DBHandler.Search(ctx, in, out)
}

func (h *DB) SearchById(ctx context.Context, in *SearchByIdRequest, out *SearchByIdResponse) error {
	return h.DBHandler.SearchById(ctx, in, out)
}

func (h *DB) Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.DBHandler.Health(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/kazoup/platform/db/srv/proto/db/db.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x6e, 0xe2, 0x26, 0x4d, 0x4f, 0x9b, 0xb6, 0xff, 0xa8, 0x3f, 0xb5, 0xc2, 0x55, 0xae, 0xa8,
	0x40, 0x42, 0x8e, 0x44, 0xc5, 0x8e, 0x55, 0x5b, 0x2e, 0x55, 0x85, 0x10, 0x2e, 0x88, 0x15, 0x0a,
	0x8e, 0x3d, 0x49, 0x2d, 0x1c, 0x8f, 0x99, 0x19, 0x23, 0xd2, 0x17, 0xe0, 0x15, 0x79, 0x09, 0xde,
	0x81, 0xb9, 0xa6, 0x76, 0x70, 0x9a, 0x05, 0x65, 0x77, 0x6e, 0xf3, 0x9d, 0xf3, 0x8d, 0xcf, 0x7c,
	0x86, 0xc3, 0x71, 0xc2, 0x2f, 0x8a, 0xa1, 0x1f, 0x91, 0x49, 0xff, 0x4b, 0x78, 0x49, 0x8a, 0xbc,
	0x9f, 0xa7, 0x21, 0x1f, 0x11, 0x3a, 0xe9, 0xc7, 0xc3, 0x3e, 0xa3, 0xdf, 0xfa, 0x39, 0x25, 0x9c,
	0x48, 0x27, 0x1e, 0xfa, 0xca, 0x46, 0xdb, 0x63, 0xe2, 0x4f, 0x92, 0x88, 0x12, 0x5f, 0xe4, 0xfd,
	0x78, 0xe8, 0x7d, 0x82, 0xee, 0x31, 0xc5, 0x21, 0xc7, 0x01, 0xfe, 0x5a, 0x60, 0xc6, 0xd1, 0x2e,
	0xb4, 0x92, 0x2c, 0xc6, 0xdf, 0xdd, 0xc6, 0x83, 0xc6, 0xa3, 0xf5, 0x40, 0x3b, 0x08, 0xc1, 0x2a,
	0x9f, 0xe6, 0xd8, 0x6d, 0xaa, 0xa0, 0xb2, 0xd1, 0x16, 0x34, 0x93, 0xd8, 0x75, 0x54, 0x44, 0x58,
	0xb2, 0x26, 0x0e, 0x79, 0xe8, 0xae, 0xea, 0x1a, 0x69, 0x7b, 0x3b, 0xb0, 0x65, 0xe1, 0x59, 0x4e,
	0x32, 0x86, 0xbd, 0x57, 0xb0, 0x11, 0xe0, 0x30, 0xfe, 0xeb, 0x76, 0xde, 0x01, 0x6c, 0x6a, 0x20,
	0x0d, 0x8c, 0x6e, 0x41, 0x9b, 0x62, 0x56, 0xa4, 0xdc, 0x40, 0x19, 0x4f, 0x32, 0xfc, 0x90, 0xc7,
	0xff, 0x92, 0xa1, 0x85, 0x37, 0x0c, 0x4f, 0xa1, 0x7b, 0x82, 0x53, 0x7c, 0x03, 0x0d, 0x25, 0xb8,
	0x85, 0x32, 0xe0, 0x3f, 0x1b, 0xb0, 0xab, 0x43, 0x47, 0xd3, 0x77, 0x05, 0xa6, 0x53, 0xdb, 0xc4,
	0x85, 0x35, 0x85, 0x8b, 0x99, 0x68, 0xe3, 0x88, 0xf3, 0xd6, 0x95, 0xed, 0x25, 0x38, 0x13, 0x9d,
	0x64, 0x5c, 0x3b, 0xaa, 0x3d, 0xa6, 0x13, 0xd3, 0x4c, 0xd9, 0xa8, 0x07, 0x9d, 0x48, 0x30, 0x19,
	0x13, 0x3a, 0x35, 0x1c, 0x67, 0x3e, 0xda, 0x01, 0xa7, 0xa0, 0xa9, 0xdb, 0x52, 0x61, 0x69, 0x4a,
	0xdc, 0x18, 0xe7, 0xfc, 0xc2, 0x6d, 0x8b, 0x98, 0x13, 0x68, 0x07, 0xdd, 0x86, 0xf5, 0x51, 0x92,
	0xe2, 0x81, 0xe2, 0xb6, 0xa6, 0x41, 0x64, 0xe0, 0xbd, 0xe4, 0x27, 0x92, 0x69, 0xc8, 0xf8, 0x80,
	0x61, 0x9c, 0xb9, 0x1d, 0x75, 0xac, 0x23, 0x03, 0xe7, 0xc2, 0xf7, 0xf6, 0xe0, 0xff, 0x39, 0x66,
	0x86, 0xf3, 0xaf, 0x26, 0x74, 0xcf, 0x71, 0x48, 0xa3, 0x8b, 0xe5, 0x37, 0x2a, 0x29, 0x35, 0x4b,
	0x94, 0x44, 0x6c, 0x44, 0x89, 0xa6, 0xe9, 0x04, 0xca, 0x96, 0x31, 0x96, 0x5c, 0x62, 0x45, 0x51,
	0xc4, 0xa4, 0x5d, 0xa1, 0xde, 0xaa, 0xa7, 0xde, 0xae, 0xa1, 0xbe, 0x56, 0xa6, 0x6e, 0xbf, 0x68,
	0xa7, 0xf4, 0x45, 0x2b, 0xd7, 0xb1, 0x7e, 0xdd, 0x75, 0x40, 0xf5, 0x3a, 0xe4, 0x3e, 0x87, 0x51,
	0x84, 0x19, 0x73, 0x37, 0xf4, 0x3e, 0x6b, 0x0f, 0x3d, 0x86, 0x9d, 0x88, 0x64, 0x1c, 0x67, 0x7c,
	0x30, 0x9b, 0x78, 0x53, 0x55, 0x6c, 0x9b, 0xf8, 0xb1, 0x1d, 0xfc, 0x19, 0xec, 0x65, 0x64, 0xa0,
	0xc5, 0x61, 0xa0, 0xc6, 0x20, 0x34, 0x19, 0x27, 0x59, 0x98, 0xba, 0x5d, 0x71, 0xa2, 0x13, 0xec,
	0x66, 0xe4, 0x4c, 0x65, 0x5f, 0x8a, 0xe4, 0x5b, 0x93, 0xf3, 0x9e, 0xc3, 0x96, 0xbd, 0xee, 0xeb,
	0xdf, 0x96, 0x64, 0x9c, 0x64, 0x23, 0x62, 0x6f, 0x5c, 0xda, 0xde, 0x1b, 0xf8, 0x4f, 0x9f, 0x3e,
	0x9a, 0x9e, 0xde, 0xc0, 0x33, 0x7f, 0x02, 0xa8, 0x0c, 0xb7, 0xe4, 0xb1, 0xef, 0x43, 0xf7, 0x35,
	0x0e, 0x53, 0x3e, 0xdb, 0x14, 0xdb, 0xa2, 0x71, 0xd5, 0x42, 0xf2, 0xb3, 0x45, 0x57, 0x70, 0x8c,
	0x87, 0xbc, 0x60, 0xaa, 0xce, 0x09, 0x8c, 0x57, 0xc7, 0xef, 0xe9, 0x8f, 0x16, 0x34, 0x4f, 0x8e,
	0xd0, 0x19, 0xb4, 0xb5, 0xb2, 0xa1, 0x7b, 0xfe, 0x9c, 0xa8, 0xfa, 0x15, 0x45, 0xed, 0xdd, 0x5f,
	0x98, 0x37, 0xfb, 0xbd, 0x82, 0x5e, 0xc0, 0xaa, 0xd4, 0x32, 0x74, 0xe7, 0x8f, 0xd2, 0x92, 0x56,
	0xf6, 0xee, 0x2e, 0xc8, 0xce, 0x60, 0xc4, 0x4c, 0x5a, 0x8b, 0x6a, 0x66, 0xaa, 0x68, 0x60, 0xcd,
	0x4c, 0x73, 0x22, 0xa6, 0xc0, 0xf4, 0x73, 0xac, 0x01, 0xab, 0xe8, 0x5b, 0x0d, 0xd8, 0x9c, 0x68,
	0xad, 0xa0, 0xcf, 0x56, 0x13, 0xcd, 0xdb, 0x46, 0x0f, 0x17, 0x9c, 0xa9, 0xaa, 0x5a, 0xef, 0x60,
	0x59, 0x59, 0x79, 0x5c, 0xbd, 0x27, 0x35, 0xe3, 0x56, 0xc4, 0xa3, 0x66, 0xdc, 0xea, 0xb6, 0x0b,
	0xb0, 0x8f, 0x00, 0x57, 0x4b, 0x87, 0xbc, 0x05, 0x07, 0x4a, 0x0b, 0xde, 0xdb, 0xbf, 0xb6, 0xa6,
	0x3c, 0xa5, 0x5e, 0xbd, 0x9a, 0x29, 0x2b, 0x8b, 0x5b, 0x33, 0x65, 0x75, 0x67, 0xbd, 0x95, 0x61,
	0x5b, 0xfd, 0xd3, 0x0f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x88, 0xcd, 0x3f, 0x1e, 0x0a, 0x08,
	0x00, 0x00,
}
