{"version":3,"sources":["filesize.js"],"names":["global","filesize","arg","descriptor","arguments","length","undefined","result","skip","val","e","base","bits","ceil","neg","num","output","round","unix","spacer","suffixes","isNaN","Error","exponent","Number","Math","floor","log","pow","toFixed","si","charAt","b","test","value","suffix","join","bytes","exports","module","define","amd","window"],"mappings":";;;;AAAA,cASA,SAAWA,GAeV,QAASC,GAASC,GACjB,GAAIC,GAAaC,UAAUC,QAAU,GAAsBC,SAAjBF,UAAU,MAAwBA,UAAU,GAElFG,KACAC,GAAO,EACPC,EAAM,EACNC,EAAIJ,OACJK,EAAOL,OACPM,EAAON,OACPO,EAAOP,OACPQ,EAAMR,OACNS,EAAMT,OACNU,EAASV,OACTW,EAAQX,OACRY,EAAOZ,OACPa,EAASb,OACTc,EAAWd,MAEf,IAAIe,MAAMnB,GACT,KAAM,IAAIoB,OAAM,oBAoEjB,OAjEAV,GAAOT,EAAWS,QAAS,EAC3BM,EAAOf,EAAWe,QAAS,EAC3BP,EAA2BL,SAApBH,EAAWQ,KAAqBR,EAAWQ,KAAO,EACzDM,EAA6BX,SAArBH,EAAWc,MAAsBd,EAAWc,MAAQC,EAAO,EAAI,EACvEC,EAA+Bb,SAAtBH,EAAWgB,OAAuBhB,EAAWgB,OAASD,EAAO,GAAK,IAC3EE,EAAmCd,SAAxBH,EAAWiB,SAAyBjB,EAAWiB,YAC1DJ,EAA+BV,SAAtBH,EAAWa,OAAuBb,EAAWa,OAAS,SAC/DN,EAA4BJ,SAAxBH,EAAWoB,SAAyBpB,EAAWoB,SAAW,GAC9DR,EAAMS,OAAOtB,GACbY,EAAY,EAANC,EACNF,EAAOF,EAAO,EAAI,IAAO,KAGrBG,IACHC,GAAOA,GAII,IAARA,GACHR,EAAO,GAAK,EACZA,EAAO,GAAKW,EAAO,GAAMN,EAAa,IAAN,OAGtB,KAANF,GAAYW,MAAMX,MACrBA,EAAIe,KAAKC,MAAMD,KAAKE,IAAIZ,GAAOU,KAAKE,IAAId,KAIrCH,EAAI,IACPA,EAAI,GAGLD,EAAe,IAATE,EAAaI,EAAMU,KAAKG,IAAI,EAAO,GAAJlB,GAAUK,EAAMU,KAAKG,IAAI,IAAMlB,GAEhEE,IACHH,EAAY,EAANA,EAEFA,EAAMI,IACTJ,GAAYI,EACZH,MAIFH,EAAO,GAAKiB,OAAOf,EAAIoB,QAAQnB,EAAI,EAAIO,EAAQ,IAC/CV,EAAO,GAAc,KAATI,GAAqB,IAAND,EAAUE,EAAO,KAAO,KAAOkB,EAAGlB,EAAO,OAAS,SAASF,IAEjFF,GAAQU,IACZX,EAAO,GAAKA,EAAO,GAAGwB,OAAO,GAEzBC,EAAEC,KAAK1B,EAAO,MACjBA,EAAO,GAAKkB,KAAKC,MAAMnB,EAAO,IAC9BA,EAAO,GAAK,MAMXO,IACHP,EAAO,IAAMA,EAAO,IAIrBA,EAAO,GAAKa,EAASb,EAAO,KAAOA,EAAO,GAG3B,UAAXS,EACIT,EAGO,aAAXS,EACIN,EAGO,WAAXM,GACMkB,MAAO3B,EAAO,GAAI4B,OAAQ5B,EAAO,IAGpCA,EAAO6B,KAAKjB,GAjHpB,GAAIa,GAAI,UACJF,GACHlB,MAAO,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtDyB,OAAQ,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAkHjC,oBAAZC,SACVC,OAAOD,QAAUrC,EACW,kBAAXuC,SAAyBA,OAAOC,IACjDD,OAAO,WACN,MAAOvC,KAGRD,EAAOC,SAAWA,GAEC,mBAAXyC,QAAyBA,OAAS1C","file":"filesize.min.js","sourcesContent":["\"use strict\";\n\n/**\n * filesize\n *\n * @copyright 2016 Jason Mulligan <jason.mulligan@avoidwork.com>\n * @license BSD-3-Clause\n * @version 3.1.6\n */\n(function (global) {\n\tvar b = /^(b|B)$/;\n\tvar si = {\n\t\tbits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t};\n\n\t/**\n  * filesize\n  *\n  * @method filesize\n  * @param  {Mixed}   arg        String, Int or Float to transform\n  * @param  {Object}  descriptor [Optional] Flags\n  * @return {String}             Readable file size String\n  */\n\tfunction filesize(arg) {\n\t\tvar descriptor = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t\tvar result = [],\n\t\t    skip = false,\n\t\t    val = 0,\n\t\t    e = undefined,\n\t\t    base = undefined,\n\t\t    bits = undefined,\n\t\t    ceil = undefined,\n\t\t    neg = undefined,\n\t\t    num = undefined,\n\t\t    output = undefined,\n\t\t    round = undefined,\n\t\t    unix = undefined,\n\t\t    spacer = undefined,\n\t\t    suffixes = undefined;\n\n\t\tif (isNaN(arg)) {\n\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t}\n\n\t\tbits = descriptor.bits === true;\n\t\tunix = descriptor.unix === true;\n\t\tbase = descriptor.base !== undefined ? descriptor.base : 2;\n\t\tround = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;\n\t\tspacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? \"\" : \" \";\n\t\tsuffixes = descriptor.suffixes !== undefined ? descriptor.suffixes : {};\n\t\toutput = descriptor.output !== undefined ? descriptor.output : \"string\";\n\t\te = descriptor.exponent !== undefined ? descriptor.exponent : -1;\n\t\tnum = Number(arg);\n\t\tneg = num < 0;\n\t\tceil = base > 2 ? 1000 : 1024;\n\n\t\t// Flipping a negative number to determine the size\n\t\tif (neg) {\n\t\t\tnum = -num;\n\t\t}\n\n\t\t// Zero is now a special case because bytes divide by 1\n\t\tif (num === 0) {\n\t\t\tresult[0] = 0;\n\t\t\tresult[1] = unix ? \"\" : !bits ? \"B\" : \"b\";\n\t\t} else {\n\t\t\t// Determining the exponent\n\t\t\tif (e === -1 || isNaN(e)) {\n\t\t\t\te = Math.floor(Math.log(num) / Math.log(ceil));\n\t\t\t}\n\n\t\t\t// Exceeding supported length, time to reduce & multiply\n\t\t\tif (e > 8) {\n\t\t\t\te = 8;\n\t\t\t}\n\n\t\t\tval = base === 2 ? num / Math.pow(2, e * 10) : num / Math.pow(1000, e);\n\n\t\t\tif (bits) {\n\t\t\t\tval = val * 8;\n\n\t\t\t\tif (val > ceil) {\n\t\t\t\t\tval = val / ceil;\n\t\t\t\t\te++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[0] = Number(val.toFixed(e > 0 ? round : 0));\n\t\t\tresult[1] = base === 10 && e === 1 ? bits ? \"kb\" : \"kB\" : si[bits ? \"bits\" : \"bytes\"][e];\n\n\t\t\tif (!skip && unix) {\n\t\t\t\tresult[1] = result[1].charAt(0);\n\n\t\t\t\tif (b.test(result[1])) {\n\t\t\t\t\tresult[0] = Math.floor(result[0]);\n\t\t\t\t\tresult[1] = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Decorating a 'diff'\n\t\tif (neg) {\n\t\t\tresult[0] = -result[0];\n\t\t}\n\n\t\t// Applying custom suffix\n\t\tresult[1] = suffixes[result[1]] || result[1];\n\n\t\t// Returning Array, Object, or String (default)\n\t\tif (output === \"array\") {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (output === \"exponent\") {\n\t\t\treturn e;\n\t\t}\n\n\t\tif (output === \"object\") {\n\t\t\treturn { value: result[0], suffix: result[1] };\n\t\t}\n\n\t\treturn result.join(spacer);\n\t}\n\n\t// CommonJS, AMD, script tag\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = filesize;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function () {\n\t\t\treturn filesize;\n\t\t});\n\t} else {\n\t\tglobal.filesize = filesize;\n\t}\n})(typeof window !== \"undefined\" ? window : global);\n"]}