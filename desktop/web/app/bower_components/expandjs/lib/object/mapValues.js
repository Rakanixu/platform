/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */

/**
 * @license
 * Copyright (c) 2015 The ExpandJS authors. All rights reserved.
 * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt
 * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt
 * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt
 */
(function () {
    "use strict";

    var _              = require('lodash'),
        assertArgument = require('../assert/assertArgument'),
        isFunction     = require('../tester/isFunction'),
        isObject       = require('../tester/isObject'),
        isString       = require('../tester/isString');

    /**
     * Creates an object with the same keys as `object` and values generated by running each own enumerable property of `object` through `iteratee`.
     * The iteratee function is bound to `thisArg` and invoked with three arguments; (value, key, object).
     *
     * ```js
     * XP.mapValues({a: 1, b: 2}, function(n) { return n * 3; });
     * // => {a: 3, b: 6}
     * ```
     *
     * @function mapValues
     * @param {Object} object The object to iterate over.
     * @param {Function | string} iteratee The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @hot
     */
    module.exports = function mapValues(object, iteratee, thisArg) {
        assertArgument(isObject(object), 1, 'Object');
        assertArgument(isFunction(iteratee) || isString(iteratee), 2, 'Function or string');
        return _.mapValues(object, iteratee, thisArg);
    };

}());
