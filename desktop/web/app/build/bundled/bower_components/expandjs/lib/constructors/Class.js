!function(){var assertArgument=require("../assert/assertArgument"),assign=require("../object/assign"),capitalize=require("../string/capitalize"),concat=require("../array/concat"),defineProperties=require("../object/defineProperties"),flush=require("../collection/flush"),forOwn=require("../object/forOwn"),isArrayable=require("../tester/isArrayable"),isFunction=require("../tester/isFunction"),isObject=require("../tester/isObject"),isString=require("../tester/isString"),isVoid=require("../tester/isVoid"),promise=require("../function/promise"),pull=require("../array/pull"),push=require("../array/push"),waterfall=require("../function/waterfall"),withdraw=require("../object/withdraw");module.exports=function(name,opt){assertArgument(isString(name,!0),1,"string"),assertArgument(isVoid(opt)||isObject(opt),2,"Object"),opt=opt||{};var Constructor=null,Super=withdraw(opt,"extends")||Function,initialize=withdraw(opt,"initialize")||Super,options=withdraw(opt,"options");return eval("Constructor = function "+name+"() {    var self = this, promised = self._promise;    self.options   = self.options || Constructor.options;    self._snippets = self._snippets || {};    self._promise  = self._promise || (initialize.promise ? promise(arguments, initialize.value, self) : null);    return initialize !== Function && (promised || !initialize.promise) ? initialize.apply(self, arguments) : self;};"),Constructor.prototype=Object.create(Super.prototype,{constructor:{configurable:!0,value:Constructor,writable:!0}}),defineProperties(Constructor,{options:{static:!0,value:assign({},Super.options,options)}}),defineProperties(Constructor,{catch:function(e){assertArgument(isFunction(e),1,"Function");var t=this;return t._promise&&t._promise.catch(e),t},then:function(e){assertArgument(isFunction(e),1,"Function");var t=this;return t._promise&&t._promise.then(e).catch(function(){}),t},_assert:{enumerable:!1,value:function(e,t){assertArgument(isObject(e),1,"Object"),assertArgument(isFunction(t),2,"Function");var i=this,r=null;forOwn(e,function(e,t){return r=i["_assert"+capitalize(t)](e)||r,!r}),t(r)}},_insertSnippet:{enumerable:!1,value:function(e,t){assertArgument(isString(e,!0),1,"string"),assertArgument(isFunction(t),2,"Function");var i=this;return push(i._snippets[e]=i._snippets[e]||[],t),i}},_insertSnippets:{enumerable:!1,value:function(e){assertArgument(isObject(e),1,"Object");var t=this;return forOwn(e,function(e,i){t._insertSnippet(i,e)}),t}},_insertedSnippets:{enumerable:!1,value:function(e){return assertArgument(isString(e,!0),1,"string"),this._snippets[e]&&concat([],this._snippets[e])||[]}},_invokeSnippets:{enumerable:!1,value:function(e,t,i){assertArgument(isString(e,!0),1,"string"),assertArgument(isVoid(t)||isArrayable(t),2,"Arrayable"),assertArgument(isVoid(i)||isFunction(i),3,"Function");var r=this,n=function(e){e.apply(null,concat([null],t))};return waterfall(concat([n],r._snippets[e]||[]),i),r}},_removeSnippet:{enumerable:!1,value:function(e,t){assertArgument(isString(e,!0),1,"string"),assertArgument(isFunction(t),2,"Function");var i=this;return i._snippets[e]&&pull(i._snippets[e],t),i}},_removeSnippets:{enumerable:!1,value:function(e){assertArgument(isString(e,!0),1,"string");var t=this;return t._snippets[e]&&flush(t._snippets[e]),t}},options:{set:function(e){return assign(this.options||{},e)}},_snippets:{enumerable:!1,set:function(e){return assign(this._snippets||{},e)}},_promise:{enumerable:!1,validate:function(e){return!isVoid(e)&&!isObject(e)&&"Object"}}}),defineProperties(Constructor,opt)}}();