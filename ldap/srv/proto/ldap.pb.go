// Code generated by protoc-gen-go.
// source: github.com/kazoup/ldap/srv/proto/ldap.proto
// DO NOT EDIT!

/*
Package ldap is a generated protocol buffer package.

It is generated from these files:
	github.com/kazoup/ldap/srv/proto/ldap.proto

It has these top-level messages:
	Config
	BindRequest
	BindResponse
	LoginRequest
	LoginResponse
	SearchRequest
	SearchResponse
*/
package ldap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Config struct {
	BaseDn       string   `protobuf:"bytes,1,opt,name=base_dn" json:"base_dn,omitempty"`
	Host         string   `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port         uint32   `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	UseSsl       bool     `protobuf:"varint,4,opt,name=use_ssl" json:"use_ssl,omitempty"`
	BindDn       string   `protobuf:"bytes,5,opt,name=bind_dn" json:"bind_dn,omitempty"`
	BindPassword string   `protobuf:"bytes,6,opt,name=bind_password" json:"bind_password,omitempty"`
	UserFilter   string   `protobuf:"bytes,7,opt,name=user_filter" json:"user_filter,omitempty"`
	GroupFilter  string   `protobuf:"bytes,8,opt,name=group_filter" json:"group_filter,omitempty"`
	Attr         []string `protobuf:"bytes,9,rep,name=attr" json:"attr,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BindRequest struct {
	Config *Config `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *BindRequest) Reset()                    { *m = BindRequest{} }
func (m *BindRequest) String() string            { return proto.CompactTextString(m) }
func (*BindRequest) ProtoMessage()               {}
func (*BindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BindRequest) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type BindResponse struct {
}

func (m *BindResponse) Reset()                    { *m = BindResponse{} }
func (m *BindResponse) String() string            { return proto.CompactTextString(m) }
func (*BindResponse) ProtoMessage()               {}
func (*BindResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LoginRequest struct {
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LoginResponse struct {
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SearchRequest struct {
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SearchResponse struct {
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Config)(nil), "Config")
	proto.RegisterType((*BindRequest)(nil), "BindRequest")
	proto.RegisterType((*BindResponse)(nil), "BindResponse")
	proto.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "LoginResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LDAP service

type LDAPClient interface {
	Bind(ctx context.Context, in *BindRequest, opts ...client.CallOption) (*BindResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type lDAPClient struct {
	c           client.Client
	serviceName string
}

func NewLDAPClient(serviceName string, c client.Client) LDAPClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "ldap"
	}
	return &lDAPClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *lDAPClient) Bind(ctx context.Context, in *BindRequest, opts ...client.CallOption) (*BindResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LDAP.Bind", in)
	out := new(BindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LDAP.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LDAP.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LDAP service

type LDAPHandler interface {
	Bind(context.Context, *BindRequest, *BindResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterLDAPHandler(s server.Server, hdlr LDAPHandler) {
	s.Handle(s.NewHandler(&LDAP{hdlr}))
}

type LDAP struct {
	LDAPHandler
}

func (h *LDAP) Bind(ctx context.Context, in *BindRequest, out *BindResponse) error {
	return h.LDAPHandler.Bind(ctx, in, out)
}

func (h *LDAP) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.LDAPHandler.Login(ctx, in, out)
}

func (h *LDAP) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.LDAPHandler.Search(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0xdf, 0x6a, 0xbb, 0x30,
	0x1c, 0xc5, 0xeb, 0xaf, 0xd6, 0xb6, 0xdf, 0xaa, 0xfd, 0x91, 0x6d, 0x2c, 0xf4, 0xaa, 0x08, 0x1b,
	0x85, 0x42, 0x84, 0xee, 0x09, 0xf6, 0xe7, 0xb2, 0x17, 0x63, 0x7b, 0x80, 0x92, 0x6a, 0xaa, 0x32,
	0x67, 0xb2, 0x24, 0x6e, 0xb0, 0xeb, 0xbd, 0xcb, 0x5e, 0x73, 0x31, 0x2a, 0xd4, 0x3b, 0xcf, 0xe1,
	0x73, 0xbe, 0xe7, 0x48, 0x60, 0x9b, 0x15, 0x3a, 0xaf, 0x8f, 0x24, 0xe1, 0xef, 0xf1, 0x1b, 0xfd,
	0xe6, 0xb5, 0x88, 0xcb, 0x94, 0x8a, 0x58, 0xc9, 0xcf, 0x58, 0x48, 0xae, 0xb9, 0x95, 0xc4, 0x7e,
	0x46, 0xbf, 0x0e, 0x78, 0x8f, 0xbc, 0x3a, 0x15, 0x19, 0x5a, 0xc2, 0xf4, 0x48, 0x15, 0x3b, 0xa4,
	0x15, 0x76, 0xd6, 0xce, 0x66, 0x8e, 0x7c, 0x70, 0x73, 0xae, 0x34, 0xfe, 0xd7, 0x2b, 0xc1, 0xa5,
	0xc6, 0x63, 0xa3, 0x82, 0x06, 0xae, 0x0d, 0xab, 0x54, 0x89, 0x5d, 0x63, 0xcc, 0x6c, 0xba, 0xa8,
	0xd2, 0x26, 0x3d, 0xb1, 0xfc, 0x15, 0x04, 0xd6, 0x10, 0x54, 0xa9, 0x2f, 0x2e, 0x53, 0xec, 0x59,
	0xfb, 0x02, 0x16, 0x26, 0x28, 0x0f, 0xa7, 0xa2, 0xd4, 0x4c, 0xe2, 0xa9, 0x35, 0x2f, 0xc1, 0xcf,
	0xa4, 0x19, 0xda, 0xbb, 0xb3, 0xbe, 0x91, 0x6a, 0x2d, 0xf1, 0x7c, 0x3d, 0xde, 0xcc, 0xa3, 0x5b,
	0x58, 0x3c, 0x98, 0x7b, 0x2f, 0xec, 0xa3, 0x66, 0x4a, 0xa3, 0x6b, 0xf0, 0x12, 0xbb, 0xdb, 0x8e,
	0x5d, 0xec, 0xa6, 0xa4, 0xfd, 0x8d, 0x28, 0x04, 0xbf, 0xe5, 0x94, 0xe0, 0x95, 0x62, 0x8d, 0xde,
	0xf3, 0xac, 0xa8, 0xba, 0x60, 0xb4, 0x84, 0xa0, 0xd3, 0x1d, 0x60, 0x8c, 0x57, 0x46, 0x65, 0x92,
	0xf7, 0xc4, 0x7f, 0x08, 0x7b, 0xa3, 0x45, 0x76, 0x3f, 0x0e, 0xb8, 0xfb, 0xa7, 0xfb, 0x67, 0x74,
	0x03, 0x6e, 0x73, 0x1c, 0xf9, 0xe4, 0x6c, 0xcb, 0x2a, 0x20, 0x83, 0xc6, 0x11, 0xda, 0xc0, 0xc4,
	0x76, 0xa0, 0x80, 0x9c, 0x77, 0xaf, 0x42, 0x32, 0xac, 0x1e, 0xa1, 0x2d, 0x78, 0x6d, 0x17, 0x0a,
	0xc9, 0x60, 0xc5, 0x6a, 0x49, 0x86, 0x23, 0xa2, 0xd1, 0xd1, 0xb3, 0x6f, 0x76, 0xf7, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x05, 0x8c, 0x79, 0x8a, 0xe2, 0x01, 0x00, 0x00,
}
