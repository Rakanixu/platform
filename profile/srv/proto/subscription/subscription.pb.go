// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/profile/srv/proto/subscription/subscription.proto
// DO NOT EDIT!

package go_micro_srv_profile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpdateSubRequest struct {
	StripeId            string `protobuf:"bytes,1,opt,name=stripe_id,json=stripeId" json:"stripe_id,omitempty"`
	CheckoutTokenId     string `protobuf:"bytes,2,opt,name=checkout_token_id,json=checkoutTokenId" json:"checkout_token_id,omitempty"`
	SubId               string `protobuf:"bytes,3,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	UpgradeSubscription bool   `protobuf:"varint,4,opt,name=upgrade_subscription,json=upgradeSubscription" json:"upgrade_subscription,omitempty"`
}

func (m *UpdateSubRequest) Reset()                    { *m = UpdateSubRequest{} }
func (m *UpdateSubRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSubRequest) ProtoMessage()               {}
func (*UpdateSubRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type UpdateSubResponse struct {
}

func (m *UpdateSubResponse) Reset()                    { *m = UpdateSubResponse{} }
func (m *UpdateSubResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateSubResponse) ProtoMessage()               {}
func (*UpdateSubResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*UpdateSubRequest)(nil), "go.micro.srv.profile.UpdateSubRequest")
	proto.RegisterType((*UpdateSubResponse)(nil), "go.micro.srv.profile.UpdateSubResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SubscriptionSrv service

type SubscriptionSrvClient interface {
	Update(ctx context.Context, in *UpdateSubRequest, opts ...client.CallOption) (*UpdateSubResponse, error)
}

type subscriptionSrvClient struct {
	c           client.Client
	serviceName string
}

func NewSubscriptionSrvClient(serviceName string, c client.Client) SubscriptionSrvClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.profile"
	}
	return &subscriptionSrvClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *subscriptionSrvClient) Update(ctx context.Context, in *UpdateSubRequest, opts ...client.CallOption) (*UpdateSubResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SubscriptionSrv.Update", in)
	out := new(UpdateSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscriptionSrv service

type SubscriptionSrvHandler interface {
	Update(context.Context, *UpdateSubRequest, *UpdateSubResponse) error
}

func RegisterSubscriptionSrvHandler(s server.Server, hdlr SubscriptionSrvHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SubscriptionSrv{hdlr}, opts...))
}

type SubscriptionSrv struct {
	SubscriptionSrvHandler
}

func (h *SubscriptionSrv) Update(ctx context.Context, in *UpdateSubRequest, out *UpdateSubResponse) error {
	return h.SubscriptionSrvHandler.Update(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/kazoup/platform/profile/srv/proto/subscription/subscription.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x09, 0x7f, 0xa2, 0xd6, 0x4b, 0x69, 0x5a, 0xa4, 0x0a, 0x16, 0x94, 0x01, 0x10, 0x83,
	0x2d, 0xe0, 0x53, 0x20, 0x31, 0x25, 0x30, 0x31, 0x44, 0x89, 0x73, 0x4d, 0xad, 0x34, 0x39, 0x63,
	0x9f, 0x3b, 0xf0, 0x7d, 0xf8, 0x9e, 0x38, 0x49, 0x91, 0x02, 0x42, 0xea, 0xe6, 0x7b, 0xef, 0xf7,
	0xe4, 0x77, 0xc7, 0x5e, 0x2a, 0x45, 0x1b, 0x57, 0x70, 0x89, 0x8d, 0xa8, 0xf3, 0x4f, 0x74, 0x5a,
	0xe8, 0x6d, 0x4e, 0x6b, 0x34, 0x8d, 0xd0, 0x06, 0xd7, 0x6a, 0x0b, 0xc2, 0x9a, 0x5d, 0xf7, 0x26,
	0x14, 0xd6, 0x15, 0x56, 0x1a, 0xa5, 0x49, 0x61, 0xfb, 0x6b, 0xe0, 0xbd, 0x1f, 0x2d, 0x2b, 0xe4,
	0x8d, 0x92, 0x06, 0xb9, 0xcf, 0xf0, 0x7d, 0x3e, 0xfe, 0x0a, 0xd8, 0xf9, 0x9b, 0x2e, 0x73, 0x82,
	0xd4, 0x15, 0x09, 0x7c, 0x38, 0xb0, 0x14, 0x5d, 0xb1, 0xa9, 0x25, 0x9f, 0x86, 0x4c, 0x95, 0xab,
	0xe0, 0x3a, 0xb8, 0x9b, 0x26, 0x93, 0x41, 0x78, 0x2e, 0xa3, 0x7b, 0x36, 0x97, 0x1b, 0x90, 0x35,
	0x3a, 0xca, 0x08, 0x6b, 0x68, 0x3b, 0xe8, 0xb8, 0x87, 0x66, 0x3f, 0xc6, 0x6b, 0xa7, 0x7b, 0xf6,
	0x82, 0x85, 0xbe, 0x49, 0x07, 0x9c, 0xf4, 0xc0, 0x99, 0x9f, 0xbc, 0xfc, 0xc0, 0x96, 0x4e, 0x57,
	0x26, 0x2f, 0x21, 0x1b, 0x17, 0x5d, 0x9d, 0x7a, 0x68, 0x92, 0x2c, 0xf6, 0x5e, 0x3a, 0xb2, 0xe2,
	0x05, 0x9b, 0x8f, 0x6a, 0x5a, 0x8d, 0xad, 0x85, 0xc7, 0x96, 0xcd, 0xc6, 0x50, 0x6a, 0x76, 0xd1,
	0x3b, 0x0b, 0x07, 0x2e, 0xba, 0xe1, 0xff, 0x2d, 0xcc, 0xff, 0x2e, 0x7b, 0x79, 0x7b, 0x90, 0x1b,
	0x7e, 0x8b, 0x8f, 0x8a, 0xb0, 0xbf, 0xe4, 0xd3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x52,
	0x2b, 0x66, 0x99, 0x01, 0x00, 0x00,
}
