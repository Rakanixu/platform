// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/search/srv/proto/search/search.proto
// DO NOT EDIT!

package go_micro_srv_search_search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Search service

type SearchClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type searchClient struct {
	c           client.Client
	serviceName string
}

func NewSearchClient(serviceName string, c client.Client) SearchClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.search.search"
	}
	return &searchClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *searchClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Search.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchHandler interface {
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterSearchHandler(s server.Server, hdlr SearchHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Search{hdlr}, opts...))
}

type Search struct {
	SearchHandler
}

func (h *Search) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.SearchHandler.Search(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/kazoup/platform/search/srv/proto/search/search.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x4f, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x4e, 0xac, 0xca, 0x2f, 0x2d, 0xd0, 0x2f, 0xc8,
	0x49, 0x2c, 0x49, 0xcb, 0x2f, 0xca, 0xd5, 0x2f, 0x4e, 0x4d, 0x2c, 0x4a, 0xce, 0xd0, 0x2f, 0x2e,
	0x2a, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x87, 0x0b, 0x80, 0x29, 0x3d, 0xb0, 0x98, 0x90, 0x54,
	0x7a, 0xbe, 0x5e, 0x6e, 0x66, 0x72, 0x51, 0xbe, 0x1e, 0x50, 0x9d, 0x1e, 0x54, 0x0a, 0x42, 0x49,
	0x39, 0x92, 0x61, 0x78, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x6a, 0x31, 0xc4, 0x78, 0xa3, 0x6c,
	0x2e, 0xb6, 0x60, 0xb0, 0x84, 0x50, 0x22, 0x9c, 0xa5, 0xa9, 0x87, 0xdb, 0x4e, 0x3d, 0x88, 0x9a,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x2d, 0x62, 0x94, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xed, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x49,
	0x16, 0xf2, 0x15, 0x01, 0x00, 0x00,
}
