// Code generated by protoc-gen-go.
// source: github.com/Rakanixu/smtp/srv/proto/smtp/smtp.proto
// DO NOT EDIT!

/*
Package go_micro_srv_smtp is a generated protocol buffer package.

It is generated from these files:
	github.com/Rakanixu/smtp/srv/proto/smtp/smtp.proto

It has these top-level messages:
	SendRequest
	SendResponse
	SetSettingsRequest
	SetSettingsResponse
*/
package go_micro_srv_smtp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SendRequest struct {
	Recipient []string `protobuf:"bytes,1,rep,name=recipient" json:"recipient,omitempty"`
	Subject   string   `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Body      string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SendResponse struct {
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetSettingsRequest struct {
	EmailHost         string `protobuf:"bytes,1,opt,name=email_host,json=emailHost" json:"email_host,omitempty"`
	EmailHostPort     string `protobuf:"bytes,2,opt,name=email_host_port,json=emailHostPort" json:"email_host_port,omitempty"`
	EmailHostUser     string `protobuf:"bytes,3,opt,name=email_host_user,json=emailHostUser" json:"email_host_user,omitempty"`
	EmailHostPassword string `protobuf:"bytes,4,opt,name=email_host_password,json=emailHostPassword" json:"email_host_password,omitempty"`
	DefaultFromEmail  string `protobuf:"bytes,5,opt,name=default_from_email,json=defaultFromEmail" json:"default_from_email,omitempty"`
}

func (m *SetSettingsRequest) Reset()                    { *m = SetSettingsRequest{} }
func (m *SetSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetSettingsRequest) ProtoMessage()               {}
func (*SetSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SetSettingsResponse struct {
}

func (m *SetSettingsResponse) Reset()                    { *m = SetSettingsResponse{} }
func (m *SetSettingsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetSettingsResponse) ProtoMessage()               {}
func (*SetSettingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*SendRequest)(nil), "go.micro.srv.smtp.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "go.micro.srv.smtp.SendResponse")
	proto.RegisterType((*SetSettingsRequest)(nil), "go.micro.srv.smtp.SetSettingsRequest")
	proto.RegisterType((*SetSettingsResponse)(nil), "go.micro.srv.smtp.SetSettingsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SMTP service

type SMTPClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
	SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...client.CallOption) (*SetSettingsResponse, error)
}

type sMTPClient struct {
	c           client.Client
	serviceName string
}

func NewSMTPClient(serviceName string, c client.Client) SMTPClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.smtp"
	}
	return &sMTPClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *sMTPClient) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SMTP.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMTPClient) SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...client.CallOption) (*SetSettingsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SMTP.SetSettings", in)
	out := new(SetSettingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMTP service

type SMTPHandler interface {
	Send(context.Context, *SendRequest, *SendResponse) error
	SetSettings(context.Context, *SetSettingsRequest, *SetSettingsResponse) error
}

func RegisterSMTPHandler(s server.Server, hdlr SMTPHandler) {
	s.Handle(s.NewHandler(&SMTP{hdlr}))
}

type SMTP struct {
	SMTPHandler
}

func (h *SMTP) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.SMTPHandler.Send(ctx, in, out)
}

func (h *SMTP) SetSettings(ctx context.Context, in *SetSettingsRequest, out *SetSettingsResponse) error {
	return h.SMTPHandler.SetSettings(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xdb, 0x4a, 0xc3, 0x40,
	0x10, 0x35, 0xb6, 0x2a, 0x1d, 0xaf, 0x9d, 0x22, 0x84, 0xe2, 0xa5, 0x04, 0x2c, 0x3e, 0xc8, 0x06,
	0xea, 0x37, 0x28, 0xfa, 0x20, 0x94, 0x56, 0x1f, 0x7c, 0x31, 0xe4, 0xb2, 0x6d, 0x57, 0x9b, 0x6c,
	0xdc, 0xdd, 0x78, 0xf9, 0x2c, 0x3f, 0xc9, 0x3f, 0x71, 0xb3, 0x4d, 0x9a, 0x5a, 0x15, 0x21, 0x24,
	0x99, 0x73, 0x4e, 0xce, 0xc9, 0xcc, 0x2c, 0xf4, 0xc6, 0x4c, 0x4d, 0xb2, 0x80, 0x84, 0x3c, 0x76,
	0x07, 0xfe, 0x93, 0x9f, 0xb0, 0xb7, 0xcc, 0x95, 0xb1, 0x4a, 0x5d, 0x29, 0x5e, 0xdc, 0x54, 0x70,
	0xc5, 0x8b, 0x52, 0xdf, 0x88, 0xa9, 0xb1, 0x39, 0xe6, 0x24, 0x66, 0xa1, 0xe0, 0x44, 0x6b, 0x48,
	0x4e, 0x38, 0xf7, 0xb0, 0x39, 0xa4, 0x49, 0x34, 0xa0, 0xcf, 0x19, 0x95, 0x0a, 0x0f, 0xa0, 0x21,
	0x68, 0xc8, 0x52, 0x46, 0x13, 0x65, 0x5b, 0x9d, 0xda, 0x69, 0x63, 0x50, 0x01, 0x68, 0xc3, 0x86,
	0xcc, 0x82, 0x47, 0x1a, 0x2a, 0x7b, 0xb5, 0x63, 0x69, 0xae, 0x2c, 0x11, 0xa1, 0x1e, 0xf0, 0xe8,
	0xdd, 0xae, 0x19, 0xd8, 0xbc, 0x3b, 0x3b, 0xb0, 0x35, 0xb3, 0x96, 0x29, 0x4f, 0x24, 0x75, 0x3e,
	0x2d, 0xc0, 0x21, 0x55, 0xfa, 0x52, 0x2c, 0x19, 0xcb, 0x32, 0xf2, 0x10, 0x80, 0xc6, 0x3e, 0x9b,
	0x7a, 0x13, 0x2e, 0xf3, 0xcc, 0xdc, 0xa0, 0x61, 0x90, 0x2b, 0x0d, 0x60, 0x17, 0x76, 0x2b, 0xda,
	0x4b, 0xb9, 0x28, 0xb3, 0xb7, 0xe7, 0x9a, 0xbe, 0x06, 0x97, 0x74, 0x99, 0xa4, 0xa2, 0xf8, 0x99,
	0x4a, 0x77, 0xa7, 0x41, 0x24, 0xd0, 0x5a, 0xf4, 0xf3, 0xa5, 0x7c, 0xe5, 0x22, 0xb2, 0xeb, 0x46,
	0xdb, 0xac, 0x3c, 0x0b, 0x02, 0xcf, 0x00, 0x23, 0x3a, 0xf2, 0xb3, 0xa9, 0xf2, 0x46, 0x82, 0xc7,
	0x9e, 0x51, 0xd8, 0x6b, 0x46, 0xbe, 0x57, 0x30, 0x97, 0x9a, 0xb8, 0xc8, 0x71, 0x67, 0x1f, 0x5a,
	0xdf, 0x5a, 0x9c, 0xb5, 0xde, 0xfb, 0xb0, 0xa0, 0x3e, 0xbc, 0xb9, 0xed, 0xe3, 0xb5, 0x7e, 0xea,
	0x99, 0xe0, 0x11, 0xf9, 0xb1, 0x0a, 0xb2, 0xb0, 0x87, 0xf6, 0xf1, 0x9f, 0x7c, 0x31, 0xcc, 0x15,
	0x7c, 0xc8, 0x37, 0x37, 0x8f, 0xc2, 0x93, 0x5f, 0xbf, 0x58, 0x9e, 0x76, 0xbb, 0xfb, 0x9f, 0xac,
	0xf4, 0x0f, 0xd6, 0xcd, 0x99, 0x39, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x22, 0x6b, 0xae, 0x9d,
	0x69, 0x02, 0x00, 0x00,
}
