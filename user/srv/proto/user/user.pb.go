// Code generated by protoc-gen-go.
// source: github.com/kazoup/platform/user/srv/proto/user/user.proto
// DO NOT EDIT!

/*
Package proto_user is a generated protocol buffer package.

It is generated from these files:
	github.com/kazoup/platform/user/srv/proto/user/user.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	HealthRequest
	HealthResponse
*/
package proto_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type HealthRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HealthRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type HealthResponse struct {
	Status int64  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HealthResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "proto.user.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "proto.user.ReadResponse")
	proto.RegisterType((*HealthRequest)(nil), "proto.user.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "proto.user.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Service service

type ServiceClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
}

type serviceClient struct {
	c           client.Client
	serviceName string
}

func NewServiceClient(serviceName string, c client.Client) ServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto.user"
	}
	return &serviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serviceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Health(context.Context, *HealthRequest, *HealthResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Service{hdlr}, opts...))
}

type Service struct {
	ServiceHandler
}

func (h *Service) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ServiceHandler.Read(ctx, in, out)
}

func (h *Service) Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.ServiceHandler.Health(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/kazoup/platform/user/srv/proto/user/user.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x4f, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x26, 0xa1, 0x04, 0x71, 0x40, 0x07, 0x0b, 0x41, 0xc8, 0x84, 0x82, 0x84, 0x98, 0x6c, 0x89,
	0x4e, 0x08, 0x16, 0x36, 0xe6, 0xf0, 0x04, 0x6e, 0x73, 0xa5, 0x16, 0x69, 0x6c, 0xec, 0x73, 0x05,
	0xbc, 0x01, 0x6f, 0x8d, 0x62, 0x3b, 0x6a, 0x11, 0x2c, 0xc9, 0x7d, 0xf7, 0xfd, 0xf8, 0x3b, 0xb8,
	0x7f, 0x55, 0xb4, 0xf2, 0x73, 0xbe, 0xd0, 0x6b, 0xf1, 0x26, 0xbf, 0xb4, 0x37, 0xc2, 0x74, 0x92,
	0x96, 0xda, 0xae, 0x85, 0x77, 0x68, 0x85, 0xb3, 0x1b, 0x61, 0xac, 0x26, 0x1d, 0xe1, 0xf0, 0xe1,
	0x01, 0x33, 0x08, 0x3f, 0x3e, 0x6c, 0xea, 0x19, 0x1c, 0x37, 0x28, 0xdb, 0x06, 0xdf, 0x3d, 0x3a,
	0x62, 0x67, 0x70, 0xa0, 0xfa, 0x16, 0x3f, 0xca, 0xec, 0x2a, 0xbb, 0x3d, 0x6a, 0x22, 0x60, 0x53,
	0xc8, 0x55, 0x5b, 0xe6, 0x61, 0x95, 0xab, 0xb6, 0xbe, 0x81, 0x93, 0x68, 0x72, 0x46, 0xf7, 0x0e,
	0xd9, 0x39, 0x14, 0x16, 0x9d, 0xef, 0x28, 0xd9, 0x12, 0xaa, 0xaf, 0xe1, 0xf4, 0x19, 0x65, 0x47,
	0xab, 0x31, 0x9e, 0xc1, 0x84, 0x3e, 0x0d, 0x26, 0x59, 0x98, 0xeb, 0x47, 0x98, 0x8e, 0xa2, 0x6d,
	0x9c, 0x23, 0x49, 0xde, 0x05, 0xdd, 0x7e, 0x93, 0xd0, 0xe0, 0x56, 0xfd, 0x52, 0xa7, 0x22, 0x61,
	0xbe, 0xfb, 0xce, 0xe0, 0xf0, 0x05, 0xed, 0x46, 0x2d, 0x90, 0x3d, 0xc0, 0x64, 0xa8, 0xc5, 0x2e,
	0xf8, 0xf6, 0x40, 0xbe, 0x73, 0x5d, 0x55, 0xfe, 0x25, 0xe2, 0x93, 0xf5, 0x1e, 0x7b, 0x82, 0x22,
	0xd6, 0x60, 0x97, 0xbb, 0xaa, 0x5f, 0xfd, 0xab, 0xea, 0x3f, 0x6a, 0x8c, 0x98, 0x17, 0x81, 0x9c,
	0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xb7, 0x5e, 0xc6, 0x9b, 0x01, 0x00, 0x00,
}
